#!/usr/bin/env python3
##################################################################################
# heron - Utility to operate on XML data
#
# Copyright (c) 2019, Kenneth P. J. Dyer <kenneth@avoceteditors.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of the copyright holder nor the name of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
##################################################################################

# Module Imports
import argparse
import heron
import lxml.etree 
import logging
import pathlib
import pkg_resources
import sys

# Run Version
def run_version(args):
    ver = pkg_resources.get_distribution("heron").version

    # Report Version (Verbose)
    if args.verbose:
        content = ["Heron -  The XML Document Processor",
                "Kenneth P. J. Dyer <kenneth@avoceteditors.com>",
                "Avocet Editorial Consulting",
                f"Version {ver}", ""]
        print('\n  '.join(content))

    # Report Version (Non-verbose)
    else:
        print(f"Heron - The XML Document Processor\n  version {ver}")


# Main Process
if __name__ == '__main__':

    # Initialize Parser
    parser = argparse.ArgumentParser(
        prog="heron",
        description="An XML document processor"
    )
    parser.set_defaults(func=run_version, compiler_operation=False)

    # Options
    parser.add_argument("-c", "--config", default="project.xml",
            help="Specifies the project file to run from, defaults to `project.xml`")
    parser.add_argument("-d", "--debug", action="store_true",
            help="Enables debugging information in logging messages")
    parser.add_argument("-f", "--force", action="store_true",
            help="Forces certain operations")
    parser.add_argument("--latex", default="lualatex",
            help="Set LaTeX parser")
    parser.add_argument("-o", "--output", default="build",
            help="Output directory")
    parser.add_argument("-q", "--quotes", default="double",
            choices=["single", "double", "emdash", "none"],
            help="Sets the quotation marks to use")
    parser.add_argument("-s", "--source", default="src",
            help="Path to source directory")
    parser.add_argument("-T", "--target",
            help="Sets the default target xml:id for builds and reads")
    parser.add_argument("-t", "--type", default="book",
            help="Sets the build type")
    parser.add_argument("-v", "--verbose", action="store_true",
            help="Enables verbosity in logging messages")



    # Commands
    cmd = parser.add_subparsers(title="comamnd")
    
    compiler = cmd.add_parser("compile")
    compiler.set_defaults(func=heron.run_compile, compiler_operation=True)

    cmd.add_parser("build").set_defaults(func=heron.run_build)

    cmd.add_parser("init").set_defaults(func=heron.run_init)

    cmd.add_parser("latex").set_defaults(func=heron.run_latex)

    cmd.add_parser("update").set_defaults(func=heron.run_updates)

    cmd.add_parser("version").set_defaults(func=run_version)

    # Parse Args
    args = parser.parse_args()

    # Configure Logging
    if args.debug:
        log_level = logging.DEBUG
    elif args.verbose:
        log_level = logging.INFO
    else:
        log_level = logging.WARN

    if args.verbose:
        log_format = "[ %(levelname)s ]: %(message)s (%(filename)s:%(lineno)s))"
    else:
        log_format = "[ %(levelname)s ]: %(message)s"

    logging.basicConfig(level=log_level, format=log_format)
    logger = logging.getLogger()
    logger.debug("Logger configured")

    if not args.compiler_operation:
        # Configure Source
        logger.debug("Configuring source paths")
        args.source = pathlib.Path(args.source)
        if not args.source.exists():
            logger.critical(f"Source directory does not exist: {args.source}")
            sys.exit(1)

        # Configure Output
        logger.debug("Configuring output paths")
        args.output = pathlib.Path(args.output)
        if not args.output.exists():
            logger.debug(f"Output directory '{args.output}' does not exist, creating")
            args.output.mkdir()
        for path in ['latex', 'html']:
            sub = args.output.joinpath(path)
            setattr(args, "output_%s" % path, sub)
            if not sub.exists():
                sub.mkdir()


        # Initialize Configuration File
        args.config = pathlib.Path(args.config)
        if not args.config.exists():
            logger.critical(f"Configuration file '{args.config}'does not exist")
            sys.exit(1)
        else:
            try:
                args.project = lxml.etree.parse(str(args.config))
                args.project.xinclude()
                args.root = args.project.getroot()
            except Exception as e:
                logger.critical(f"Error processing '{args.config}': {e}")
                sys.exit(1)

    # Run Operation
    logger.info("Running operation")
    args.func(args)



