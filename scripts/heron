#!/usr/bin/env python3
##################################################################################
# heron2 - Temporary utility for transition to new library structure
#
# Copyright (c) 2019, Kenneth P. J. Dyer <kenneth@avoceteditors.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of the copyright holder nor the name of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
##################################################################################

# Module Imports
import argparse
import pathlib
import pkg_resources

# Local Imports
import heron.build
import heron.stats

# Logging Configuration
import logging
logger = logging.getLogger()

##################### VERSION COMMAND #########################
def report_version(args):
    """Reports the current version of the utility with other information"""
    title = "Heron"
    byline = "The Document Processor"
    version = pkg_resources.get_distribution("heron").version

    if args.verbose:
        contents = [
            f"{title} - {byline}",
            "Kenneth P. J. Dyer <kenneth@avoceteditors.com>",
            "Avocet Editorial Consulting",
            f"Version: {version}"
        ]

        line = "\n  ".join(contents)
    else:
        line = f"{name} - version {version}"

    print(line)


#################### MAIN PROCESS #############################
if __name__ == "__main__":

    # Initialize Parser
    parser = argparse.ArgumentParser(
        prog="heron",
    )
    parser.set_defaults(func=report_version)


    ############## OPTIONS ###################
    opts = parser.add_argument_group("Options")

    # Debug
    opts.add_argument("-d", "--debug", action="store_true",
        help="Enables debugging messages for the logger")

    # Verbose
    opts.add_argument("-v", "--verbose", action="store_true",
        help="Enables verbose messages for the logger")


    ############## COMMAND CONFIGURATION ###########
    cmds = parser.add_subparsers(
        title="Commands"
    )

    build_dir = pathlib.Path("build")

    ############## BUILD COMMAND #################
    cmd_build = cmds.add_parser("build", help="Generates document")

    cmd_build.add_argument("-a", "--all", action="store_true",
        help="Sets whether to build all books/chapters or just the most recent edit")
    cmd_build.add_argument("-c", "--config", default="project.xml",
        help="Sets the configuration file")
    cmd_build.add_argument("-C", "--cache", default=str(build_dir.joinpath("tmp")),
        help="Sets the caching directory")
    cmd_build.add_argument("-e", "--engine", default="lualatex",
        help="Specifies the LaTeX build engine")
    cmd_build.add_argument("-f", "--force", action="store_true",
        help="Force source recompile")
    cmd_build.add_argument("-o", "--output", default=str(build_dir),
        help="Sets the base output directory")
    cmd_build.add_argument("-O", "--output-type", default="book",
        choices=["book", "chapter", "web"],
        help="Sets the type of document you want to produce")
    cmd_build.add_argument("-s", "--source", default="src",
        help="Sets the source directory")
    cmd_build.add_argument("-t", "--tex", action="store_true",
        help="Indicates whether you want to run a LaTeX build to generate PDF's")
    cmd_build.add_argument("-u", "--update", action="store_true",
        help="Sets build to update cache only")

    cmd_build.set_defaults(func=heron.build.run)

    ############## STATS COMMAND ################
    cmd_stats = cmds.add_parser("stats", help="Reports document statistics")
    cmd_stats.set_defaults(func=heron.stats.run_stats)

    cmd_stats.add_argument("-a", "--all", action="store_true",
        help="Sets whether to report stats on all books/chapters or just the most recent edit")
    cmd_stats.add_argument("-C", "--cache", default=str(build_dir.joinpath("tmp")),
        help="Sets the caching directory")


    ############## XSLT COMMAND #################
    cmd_xslt = cmds.add_parser("xslt", help="Compiles XSLT files into a single stylesheet")
    cmd_xslt.set_defaults(func=heron.build.compile_xslt)
    cmd_xslt.add_argument("source", help="XSLT file to compile")
    cmd_xslt.add_argument("output", help="XSLT file to output")

    ############## VERSION COMMAND #################
    cmd_version = cmds.add_parser("version",
        help="Reports version information")
    cmd_version.set_defaults(func=report_version)


    ############### RUN COMMAND ####################
    args = parser.parse_args()

    # Configure Logging
    log_format = "[ %(levelname)s ]: %(message)s"
    log_level = logging.WARNING

    if args.verbose and args.debug: 
        log_format = "[ %(levelname)s ] (%(name)s.%(filename)s:%(lineno)s): %(message)s"
        log_level = logging.DEBUG
    elif args.debug:
        log_level = logging.DEBUG
    elif args.verbose:
        log_level = logging.INFO

    logging.basicConfig(format=log_format, level=log_level)
    logger.info("Starting Heron")

    args.func(args)





